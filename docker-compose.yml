# Indie Game Platform - Docker Compose Configuration
# Orchestriert Frontend, Backend und persistente Datenbank

services:
  # FastAPI Backend Service
  backend:
    build:
      context: ./python-backend
      dockerfile: Dockerfile
    container_name: indie-game-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=sqlite:///./data/game_platform.db
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=docker
    volumes:
      # Persistente Datenbank
      - ./data:/app/data
      # Avatar Uploads
      - ./uploads:/app/uploads
      # Development: Code-Sync (entfernen für Production)
      - ./python-backend:/app
    ports:
      - "8000:8000"
    networks:
      - indie-game-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend Service  
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: indie-game-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=docker
    ports:
      - "3000:80"
    networks:
      - indie-game-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Nginx Reverse Proxy (Optional - für Production)
  nginx:
    image: nginx:alpine
    container_name: indie-game-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - indie-game-network
    depends_on:
      - frontend
      - backend
    profiles:
      - production

# Netzwerk für Service-Kommunikation
networks:
  indie-game-network:
    name: indie-game-network
    driver: bridge

# Persistente Volumes
volumes:
  game_data:
    name: indie_game_data
    driver: local
  game_uploads:
    name: indie_game_uploads  
    driver: local

# Development Override
# Verwende: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up